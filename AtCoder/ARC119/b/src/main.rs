fn main() {
    let stdin = std::io::stdin();
    let mut rd = ProconReader::new(stdin.lock());

    let n: usize = rd.get();
    let s: Vec<char> = rd.get_chars();
    let t: Vec<char> = rd.get_chars();

    let s_ones = s.iter().filter(|&&c| c == '1').count();
    let t_ones = t.iter().filter(|&&c| c == '1').count();
    if s_ones != t_ones {
        println!("-1");
        return;
    }
    if s == t {
        println!("0");
        return;
    }
    let mut st = vec![];
    let mut prev = 0;
    let mut s_ones = 0;
    let mut t_ones = 0;
    for i in 0..n {
        if s[i] == '1' {
            s_ones += 1;
        }
        if t[i] == '1' {
            t_ones += 1;
        }
        if s_ones == t_ones {
            st.push((s[prev..=i].to_vec(), t[prev..=i].to_vec()));
            prev = i + 1;
        }
    }
    let mut ans = 0;
    for (mut s, mut t) in st {
        let res1 = solve(&s, &t);
        s.reverse();
        t.reverse();
        let res2 = solve(&s, &t);
        match (res1, res2) {
            (Some(res1), Some(res2)) => {
                ans += res1.min(res2);
            }
            (Some(res1), None) => {
                ans += res1;
            }
            (None, Some(res2)) => {
                ans += res2;
            }
            (None, None) => unreachable!(),
        }
    }
    println!("{}", ans);
}

fn solve(s: &[char], t: &[char]) -> Option<u32> {
    let mut s = s.to_vec();
    let n = s.len();
    let mut ans = 0;
    let mut j = 1;
    for i in 0..n {
        j = j.max(i + 1);
        if s[i] != t[i] {
            if s[i] == '0' {
                return None;
            }
            assert_eq!(t[i], '0');
            while j < n && s[j] == '1' {
                j += 1;
            }
            assert!(j < n);
            s.swap(i, j);
            ans += 1;
        }
    }
    Some(ans)
}

/*

10
0100110100
0010100110

 vv
0010110100
0010100110

     vv
0010101100
0010100110

      v v
0010100110
0010100110

*/

/*

10
1101001101
0110111001

v v
0111001101
0110111001

   vv
0110101101
0110111001

     v v
0110111001
0110111001


*/

/*

sample3
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
11111111111111111111111111011111101011111011110111110010100101001110111011110111111111110010011111101111111101110111011

1
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10111111111111111111111111111111101011111011110111110010100101001110111011110111111111110010011111101111111101110111011
 ^                        ^

2
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111111111111111111111111111111011111011110111110010100101001110111011110111111111110010011111101111111101110111011
   ^                             ^

3
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011111111111111111111111111111111011110111110010100101001110111011110111111111110010011111101111111101110111011
        ^                          ^
4
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101111111111111111111111111111111110111110010100101001110111011110111111111110010011111101111111101110111011
            ^                            ^

5
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101011111111111111111111111111111111111110010100101001110111011110111111111110010011111101111111101110111011
              ^                               ^
6
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001111111111111111111111111111111111111010100101001110111011110111111111110010011111101111111101110111011
               ^                                    ^

7
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111111111111111111111111111111111110100101001110111011110111111111110010011111101111111101110111011
                 ^                                   ^

8
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111011111111111111111111111111111111100101001110111011110111111111110010011111101111111101110111011
                       ^                               ^

9
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111001111111111111111111111111111111110101001110111011110111111111110010011111101111111101110111011
                        ^                                ^

10
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111111111111111111111111111111101001110111011110111111111110010011111101111111101110111011
                         ^                                ^

11
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101111111111111111111111111111001110111011110111111111110010011111101111111101110111011
                                 ^                          ^

12
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011111111111111111111111111101110111011110111111111110010011111101111111101110111011
                                   ^                          ^

13
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110111111111111111111111111110111011110111111111110010011111101111111101110111011
                                        ^                      ^

14
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011111111111111111111111111111011110111111111110010011111101111111101110111011
                                         ^                         ^

15
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011011111111111111111111111111111110111111111110010011111101111111101110111011
                                            ^                          ^

16
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111111111111111111111111111110010011111101111111101110111011
                                              ^                             ^

17
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111011111111111111111111111111010011111101111111101110111011
                                                              ^                         ^

18
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111010111111111111111111111111110011111101111111101110111011
                                                                ^                        ^
19
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111111111011111101111111101110111011
                                                                               ^           ^

20
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111111111101111111101110111011
                                                                                        ^   ^

21
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111111111111101110111011
                                                                                              ^    ^

22
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
10101111011101001011111000111111101011110011010111111111111111010111111111111110111111110111110111101111111111110111011
                                                                                                   ^        ^

*/

pub struct ProconReader<R> {
    r: R,
    l: String,
    i: usize,
}

impl<R: std::io::BufRead> ProconReader<R> {
    pub fn new(reader: R) -> Self {
        Self {
            r: reader,
            l: String::new(),
            i: 0,
        }
    }
    pub fn get<T>(&mut self) -> T
    where
        T: std::str::FromStr,
        <T as std::str::FromStr>::Err: std::fmt::Debug,
    {
        self.skip_blanks();
        assert!(self.i < self.l.len()); // remain some character
        assert_ne!(&self.l[self.i..=self.i], " ");
        let rest = &self.l[self.i..];
        let len = rest.find(' ').unwrap_or_else(|| rest.len());
        // parse self.l[self.i..(self.i + len)]
        let val = rest[..len]
            .parse()
            .unwrap_or_else(|e| panic!("{:?}, attempt to read `{}`", e, rest));
        self.i += len;
        val
    }
    fn skip_blanks(&mut self) {
        loop {
            match self.l[self.i..].find(|ch| ch != ' ') {
                Some(j) => {
                    self.i += j;
                    break;
                }
                None => {
                    let mut buf = String::new();
                    let num_bytes = self
                        .r
                        .read_line(&mut buf)
                        .unwrap_or_else(|_| panic!("invalid UTF-8"));
                    assert!(num_bytes > 0, "reached EOF :(");
                    self.l = buf
                        .trim_end_matches('\n')
                        .trim_end_matches('\r')
                        .to_string();
                    self.i = 0;
                }
            }
        }
    }
    pub fn get_vec<T>(&mut self, n: usize) -> Vec<T>
    where
        T: std::str::FromStr,
        <T as std::str::FromStr>::Err: std::fmt::Debug,
    {
        (0..n).map(|_| self.get()).collect()
    }
    pub fn get_chars(&mut self) -> Vec<char> {
        self.get::<String>().chars().collect()
    }
}
